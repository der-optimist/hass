title: Home
path: home
icon: mdi:home-outline
type: custom:grid-layout
layout:
  grid-template-columns: 25% 25% 25% 25%
  grid-template-rows: minmax(auto, auto)
  grid-template-areas: |
    "main_left meteogram meteogram meteogram"
    "main_left todo garbage birthdays"
    "main_left space2 space3 space4"
  mediaquery:
    "(max-width: 800px)":
      grid-template-columns: 100%
      grid-template-areas: |
        "meteogram"
        "main_left"
        "todo"
        "garbage"
        "birthdays"
cards:
  - type: vertical-stack
    view_layout:
      grid-area: main_left
    cards:
      - type: horizontal-stack
        cards:
          - type: markdown
            style: |
              h1 {
                font-weight: 300;
                font-size: 2.4em;
              }  
            content: >
              # {{ '%.1f'%(states('sensor.temp_esszimmer_pm') | float(0)) | float(0) }}°C
              
              Luftfeuchte: {{ states('sensor.luftfeuchtigkeit_kuche_aqara') }}%
          - type: markdown
            style: |
              h1 {
                font-weight: 300;
                font-size: 2.4em;
              }
            content: >
              # {{ states('sensor.time') }}
              
              {{ states('sensor.date_template') }}
      - type: custom:mini-graph-card
        style: |
          state__value {
            font-size: 2em;
          }
        entities: 
          - entity: sensor.temp_wetterstation
            name: gemessen
            show_state: true
            show_legend: true
          - entity: sensor.template_temp_aussen_gefuehlt
            name: gefühlt
            show_state: true
            show_legend: true
        name: Außentemperatur
        height: 145
        hour24: true
        decimals: 1
        show:
          labels: true
#      - type: entities
#        title: "Wer ist wo..."
#        show_header_toggle: false
#        entities:
#          - entity: sensor.location_jo
      - type: entities
        title: "Pizza-Timer"
        show_header_toggle: false
        entities:
          - type: custom:slider-entity-row
            entity: input_number.pizza_timer_2
            name: Minuten
            full_row: true
            hide_state: false
          - entity: input_button.pizza_timer_standard
      - type: entities
#        title: "PV aktuell"
        show_header_toggle: false
        entities:
          - type: custom:template-entity-row
            name: PV-Leistung aktuell
            entity: sensor.el_leistung_pv_ac
            state: "{{ ((float(states('sensor.el_leistung_pv_ac'),0) / 100) | round(0)) * 100 }} W"
          - type: custom:template-entity-row
            name: Verbrauch aktuell
            entity: sensor.el_leistung_verbrauch_gesamt
            state: "{{ ((float(states('sensor.el_leistung_verbrauch_gesamt'),0) / 10) | round(0)) * 10 }} W"
          - type: custom:template-entity-row
            name: PV-Einspeisung aktuell
            entity: sensor.pv_einspeisung_letzte_3_min_durchschnitt_anzeige
            state: "{{ ((float(states('sensor.pv_einspeisung_letzte_3_min_durchschnitt_anzeige'),0) / 100) | round(0)) * 100 }} W"
#  - type: picture-entity
#    entity: camera.meteogram
#    show_name: false
#    show_state: false
#    view_layout:
#      grid-area: meteogram
  - type: custom:hui-element
    view_layout:
      grid-area: meteogram
    card_type: picture-elements
    image: /local/meteograms/meteogram.png
    elements:
      - type: image
        entity: camera.meteogram
        camera_image: camera.meteogram
        style:
          left: 50%
          top: 50%
          width: 100%
          height: 100%
  - type: vertical-stack
    view_layout:
      grid-area: todo
      align-self: start
    cards:
      - type: custom:auto-entities
        show_empty: false
        card:
          type: entities
          title: "zu erledigen"
          show_header_toggle: false
        filter:
          include:
            - entity_id: "switch.reminder*"
              state: "on"
            - entity_id: "input_boolean.reminder_*"
              state: "on"
      - type: 'custom:vertical-stack-in-card'
        title: PV-Vorhersage
        cards:
          - type: custom:apexcharts-card
            graph_span: 72h
            span:
              start: day
              offset: +3h
            experimental:
              color_threshold: true
            update_interval: 5min
            apex_config:
              yaxis:
                min: 0
                max: 10000
                tickAmount: 5
              chart:
                height: 235px
              legend:
                show: false
            header:
              show: false
            now:
              show: true
              label: jetzt
            series:
              - entity: sensor.el_leistung_pv_ac
                name: Aktuell
                unit: W
                float_precision: 0
                fill_raw: last
                extend_to: now
                group_by:
                  func: avg
                  duration: 30min
                color_threshold:
                  - value: 0
                    color: gray
                  - value: 1500
                    color: gray
                  - value: 2000
                    color: darkorange
                  - value: 6552
                    color: darkorange
                  - value: 6852
                    color: lime
              - entity: sensor.solcast_forecast_rest
                type: line
                extend_to: now
                unit: W
                float_precision: 0
                show:
                  in_header: false
                color_threshold:
                  - value: 0
                    color: gray
                  - value: 1500
                    color: gray
                  - value: 2000
                    color: darkorange
                  - value: 6552
                    color: darkorange
                  - value: 6852
                    color: lime
                data_generator: |
                  return entity.attributes.forecasts.map((entry) => {
                    return [new Date(entry.period_end), entry.pv_estimate*1000];
                  });
          - type: entities
            show_header_toggle: false
            entities:
              - type: custom:template-entity-row
                name: PV-Ertrag gesamt
                entity: sensor.pv_geldertrag_gesamt
                state: "{{ float(states('sensor.pv_geldertrag_gesamt'),0) | round(0) }} €"
  - type: vertical-stack
    view_layout:
      grid-area: garbage
      align-self: start
    cards:
      - type: conditional
        conditions:
          - entity: binary_sensor.dwd_weather_warnings_active
            state: 'on'
        card:
          type: markdown
          content: >-      
            {% set gestern = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][as_timestamp(now() + timedelta( days = -1 )) | timestamp_custom("%w", True) | int-1] %}
            {% set heute = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][as_timestamp(now()) | timestamp_custom("%w", True) | int-1] %}
            {% set morgen = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][as_timestamp(now() + timedelta( days = 1 )) | timestamp_custom("%w", True) | int-1] %}
            {% set current_count = state_attr("sensor.dwd_weather_warnings_current_warning_level", "warning_count") %}
            {% set advance_count = state_attr("sensor.dwd_weather_warnings_advance_warning_level", "warning_count") %}
            {% if not ((current_count == 0 or current_count == None) and (advance_count == 0 or advance_count == None)) %}
              {% for i in range(current_count) %}
                {% set headline = state_attr("sensor.dwd_weather_warnings_current_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                {% set description = state_attr("sensor.dwd_weather_warnings_current_warning_level", "warning_" ~ loop.index ~ "_description") %}
                {% set level = state_attr("sensor.dwd_weather_warnings_current_warning_level", "warning_" ~ loop.index ~ "_level") %}
                {% set time_start = as_local(state_attr("sensor.dwd_weather_warnings_current_warning_level", "warning_" ~ loop.index ~ "_start")) %}
                {% set weekday_start = as_timestamp(time_start) | timestamp_custom("%w", True) | int %}
                {% set time_end = as_local(state_attr("sensor.dwd_weather_warnings_current_warning_level", "warning_" ~ loop.index ~ "_end")) %}
                {% set weekday_end = as_timestamp(time_end) | timestamp_custom("%w", True) | int %}
                {% set color = state_attr("sensor.dwd_weather_warnings_current_warning_level", "warning_" ~ loop.index ~ "_color") %}
              **<font color={{ color }}>{{ headline }}</font>**     
              {% set zeit = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][weekday_start-1] ~ ", " ~ time_start.strftime("%H:%M") ~ " - " ~ ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][weekday_end-1] ~ ", " ~ time_end.strftime("%H:%M") %}
              {{ zeit | regex_replace(find=gestern, replace='gestern', ignorecase=False) | regex_replace(find=heute, replace='heute', ignorecase=False) | regex_replace(find=morgen, replace='morgen', ignorecase=False) | regex_replace(find=',', replace='', ignorecase=False) }}
              *{{ description|trim }}*
              {% if not loop.last %}***{% endif %}
              {% endfor %}
              {% if ((current_count != 0) and (advance_count != 0)) %}***{% endif %}
              {% for i in range(advance_count) %}
                {% set headline = state_attr("sensor.dwd_weather_warnings_advance_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                {% set description = state_attr("sensor.dwd_weather_warnings_advance_warning_level", "warning_" ~ loop.index ~ "_description") %}
                {% set level = state_attr("sensor.sensor.dwd_weather_warnings_advance_warning_level", "warning_" ~ loop.index ~ "_level") %}
                {% set time_start = as_local(state_attr("sensor.dwd_weather_warnings_advance_warning_level", "warning_" ~ loop.index ~ "_start")) %}
                {% set weekday_start = as_timestamp(time_start) | timestamp_custom("%w", True) | int %}
                {% set time_end = as_local(state_attr("sensor.dwd_weather_warnings_advance_warning_level", "warning_" ~ loop.index ~ "_end")) %}
                {% set weekday_end = as_timestamp(time_end) | timestamp_custom("%w", True) | int %}
                {% set color = state_attr("sensor.dwd_weather_warnings_advance_warning_level", "warning_" ~ loop.index ~ "_color") %}
              **<font color={{ color }}>{{ headline }}</font>**
              {% set zeit = ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][weekday_start-1] ~ ", " ~ time_start.strftime("%H:%M") ~ " - " ~ ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][weekday_end-1] ~ ", " ~ time_end.strftime("%H:%M") %}
              {{ zeit | regex_replace(find=gestern, replace='gestern', ignorecase=False) | regex_replace(find=heute, replace='heute', ignorecase=False) | regex_replace(find=morgen, replace='morgen', ignorecase=False) | regex_replace(find=',', replace='', ignorecase=False) }}
              *{{ description|trim }}*
              {% if not loop.last %}***{% endif %}
              {% endfor %}
            {% endif %}  
#      - type: custom:auto-entities
#        show_empty: false
#        card:
#          type: markdown
#          content: |
#            {%- set mapper = {0:'"#eeeeee"',1:'"#F2DB06"',2:'"#FB8D00"',3:'"#F9413D"',4:'"#F300FF"'} %}
#            {% set ns = namespace(first=true) %}
#            {%- for sensor in states.sensor %}
#              {%- if 'sensor.dwd_warnung' in sensor.entity_id and sensor.state != "off" %}
#                {%- set danger = sensor.attributes["Gefahr (0-4)"] %}
#                {% if ns.first  == false %}
#            ----------------------------------------
#                {% endif %}
#                {%- set ns.first = false %}
#            {{ sensor.state}}: 
#            <font color = {{- mapper[danger] if danger in mapper else 'grey'}}>**{{ sensor.attributes.friendly_name }}**</font>
#            {%- if danger == 0 %}
#            Gefahrenstufe: Info
#            {%- elif danger == 1 %}
#            Gefahrenstufe: gering
#            {%- elif danger == 2 %}
#            Gefahrenstufe: mittel
#            {%- elif danger == 3 %}
#            Gefahrenstufe: hoch
#            {%- elif danger == 4 %}
#            Gefahrenstufe: extrem
#            {%- else %}
#            Gefahrenstufe: unbekannt
#            {%- endif %}
#              {%- endif %}
#
#            {%- endfor %}
#        filter:
#          include:
#            - entity_id: "sensor.dwd_warnung*"
#          exclude:
#            - state: "off"
      - type: custom:auto-entities
        show_empty: false
        card:
          type: entities
          title: "Abfall"
          show_header_toggle: false
        filter:
          include:
            - entity_id: "sensor.abfall_naechste*"
        sort:
          method: attribute
          attribute: daysTo
          numeric: true
      - type: entities
        show_header_toggle: false
        entities:
        - entity: input_boolean.arbeit_theke
          name: Arbeit Theke
        - entity: input_boolean.gaeste_abends
          name: Gäste
  - type: vertical-stack
    view_layout:
      grid-area: birthdays
    cards:
      - type: custom:auto-entities
        show_empty: false
        card:
          type: entities
          title: Batterie wechseln
        filter:
          include:
            - entity_id: "*battery"
              state: '< 15'
      #          - type: picture-elements
      #            image: /local/camera_abstellraum/last_motion.jpg
      #            elements:
      #              - type: image
      #                entity: camera.abstellraum_letze_bewegung
      #                camera_image: camera.abstellraum_letze_bewegung
      #                style:
      #                  left: 50%
      #                  top: 50%
      #                  width: 100%
      #                  height: 100%
      - type: entities
        title: Geburtstage
        show_header_toggle: false
        entities:
        - entity: sensor.geburtstage_bildschirm_0
        - entity: sensor.geburtstage_bildschirm_1
        - entity: sensor.geburtstage_bildschirm_2
        - entity: sensor.geburtstage_bildschirm_3
#      - type: custom:atomic-calendar-revive
#        name: Geburtstage
#        enableModeChange: true
#        firstDayOfWeek: 1
#        maxDaysToShow: 30
#        maxEventCount: 4
#        entities:
#          - calendar.geburtstage_und_jahrestag
#        showMonth: true
#        showWeekDay: true
#        showCurrentEventLine: false
#        showFullDayProgress: true
#        showProgressBar: false
#        showDescription: false
#        europeanDate: true
#        showHiddenText: false
#        showHours: false
#        showLoader: false
#        refreshInterval: 600
      - type: entities
        show_header_toggle: false
        entities:
#        - entity: input_boolean.eisschutz_jalousien
#          name: Eisschutz Jalousien
        - entity: sensor.temp_pool
          name: Pool
        - entity: input_boolean.gewitter
          name: Gewitter!
  - type: custom:gap-card
    height: 250
    view_layout:
      grid-area: space2
  - type: custom:gap-card
    height: 250
    view_layout:
      grid-area: space3
  - type: custom:gap-card
    height: 250
    view_layout:
      grid-area: space4