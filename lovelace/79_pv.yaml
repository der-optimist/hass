title: PV
path: pv
icon: mdi:solar-power
cards:
  - type: entities
    title: "Test"
    show_header_toggle: false
    entities:
      - sensor.el_leistung_stromzaehler_netzbezug
      - sensor.el_leistung_netz
      - sensor.el_leistung_pv_ac
      - sensor.el_leistung_pv_dc
      - sensor.el_leistung_verbrauch_gesamt
      - sensor.wirkungsgrad_wechselrichter
      - sensor.wirkungsgrad_wechselrichter_gefiltert
      - input_number.pv_einspeisebegrenzung_prozent
      - sensor.einspeiselimit_watt
      - sensor.el_leistung_pv_dc_string1
      - sensor.el_leistung_pv_dc_string2
      - sensor.anteil_el_leistung_netzbezug
      - sensor.anteil_el_leistung_pv_nicht_einspeisbar
      - sensor.anteil_el_leistung_pv_einspeisbar
      - sensor.strompreis_aktuell_effektiv_euro
      - sensor.strompreis_aktuell_effektiv_cent
      - sensor.strompreis_aktuell_abrechnung_euro
      - entity: sensor.pv_erzeugung_tag
        name: PV Erzeugung Tag
      - entity: sensor.pv_netzeinspeisung_tag
        name: PV Einspeisung Tag
      - entity: sensor.stromzaehler_netzeinspeisung
        name: ZÃ¤hlerstand Einspeisung
      - sensor.pv_geldertrag_gesamt
      - sensor.pv_geldertrag_durch_eigenverbrauch_gesamt
      - sensor.pv_geldertrag_durch_einspeisung_gesamt
      - sensor.pv_geldbetrag_bis_amortisation
      - type: custom:template-entity-row
        name: Prozent abbezahlt
        entity: sensor.pv_geldertrag_gesamt
        state: "{{ '%.2f'%(100*(states('sensor.pv_geldertrag_gesamt') | float) / ((states('sensor.pv_geldertrag_gesamt') | float) + (states('sensor.pv_geldbetrag_bis_amortisation') | float))) }} %"
      - type: custom:template-entity-row
        name: Strompreis effektiv letzte 3 Minuten
        entity: sensor.strompreis_effektiv_letzte_3_minuten
        state: "{{ '%.0f'%(100*(states('sensor.strompreis_effektiv_letzte_3_minuten') | float)) }} ct"
      - sensor.strompreis_effektiv_letzte_3_minuten
  - type: entities
    title: "SunSpec"
    show_header_toggle: false
    entities:
      - entity: sensor.fronius1_wr_inverter_dc_power
        name: DC Power
      - entity: sensor.fronius1_wr_mppt_module_0_dc_power
        name: DC Power String 0
      - entity: sensor.fronius1_wr_mppt_module_1_dc_power
        name: DC Power String 1
      - entity: sensor.fronius1_wr_inverter_ac_power
        name: AC Power
  - type: custom:apexcharts-card
    experimental:
      color_threshold: true
    graph_span: 48h
    update_interval: 5min
    apex_config:
      yaxis:
        min: 0
        max: 10000
        tickAmount: 5
    now:
      show: True
      label: "jetzt"
    span:
      start: hour
    series:
      - entity: sensor.solcast_forecast_chart
        data_generator: | # This is what builds the data
          return entity.attributes.timestamps.map((ts, index) => {
            return [new Date(ts).getTime(), entity.attributes.forecast_values[index]];
          });
        color_threshold:
          - value: 0
            color: gray
          - value: 250
            color: gray
          - value: 500
            color: darkorange
          - value: 6552
            color: darkorange
          - value: 6852
            color: lime
  - type: custom:apexcharts-card
    graph_span: 5d
    update_interval: 15min
    stacked: True
    apex_config:
      yaxis:
        min: 0
      legend:
        show: false
    span:
      start: day
    series:
      - entity: sensor.solcast_forecast_chart
        type: column
        show:
          datalabels: True
        data_generator: | # This is what builds the data
          return entity.attributes.timestamps_daily.map((ts_d, index) => {
            return [new Date(ts_d).getTime(), entity.attributes.forecast_values_daily[index]];
          });
      - entity: sensor.solcast_forecast_chart
        type: column
        color: green
        show:
          datalabels: True
        data_generator: | # This is what builds the data
          return entity.attributes.timestamp_today.map((ts_d, index) => {
            return [new Date(ts_d).getTime(), entity.attributes.pv_production_today[index]];
          });
  - type: custom:power-wheel-card
    solar_power_entity: sensor.el_leistung_pv_ac
    grid_power_entity: sensor.el_leistung_netz
    production_is_positive: false
    solar_icon: "mdi:solar-power"
    grid_icon: "mdi:transmission-tower"
    home_icon: "mdi:home"
  - type: custom:swipe-card
    cards: 
      - type: custom:apexcharts-card
        experimental:
          color_threshold: true
        graph_span: 48h
        update_interval: 5min
        apex_config:
          yaxis:
            min: 0
            max: 10000
        now:
          show: True
          label: "jetzt"
        span:
          start: hour
        series:
          - entity: sensor.solcast_forecast_chart
            data_generator: | # This is what builds the data
              return entity.attributes.timestamps.map((ts, index) => {
                return [new Date(ts).getTime(), entity.attributes.forecast_values[index]];
              });
            color_threshold:
              - value: 0
                color: gray
              - value: 1500
                color: gray
              - value: 2000
                color: darkorange
              - value: 6552
                color: darkorange
              - value: 6852
                color: lime
      - type: custom:apexcharts-card
        graph_span: 5d
        update_interval: 15min
        stacked: True
        apex_config:
          yaxis:
            min: 0
          legend:
            show: false
        span:
          start: day
        series:
          - entity: sensor.solcast_forecast_chart
            type: column
            show:
              datalabels: True
            data_generator: | # This is what builds the data
              return entity.attributes.timestamps_daily.map((ts_d, index) => {
                return [new Date(ts_d).getTime(), entity.attributes.forecast_values_daily[index]];
              });
          - entity: sensor.solcast_forecast_chart
            type: column
            color: green
            show:
              datalabels: True
            data_generator: | # This is what builds the data
              return entity.attributes.timestamp_today.map((ts_d, index) => {
                return [new Date(ts_d).getTime(), entity.attributes.pv_production_today[index]];
              });
      - type: custom:power-wheel-card
        solar_power_entity: sensor.el_leistung_pv_ac
        grid_power_entity: sensor.el_leistung_netz
        production_is_positive: false
        solar_icon: "mdi:solar-power"
        grid_icon: "mdi:transmission-tower"
        home_icon: "mdi:home"
      - type: entities
        title: "PV-Anlage"
        show_header_toggle: false
        entities:
          - sensor.el_leistung_netz
          - sensor.el_leistung_pv_ac
          - sensor.el_leistung_verbrauch_gesamt
          - sensor.pv_geldertrag_gesamt
          - type: custom:template-entity-row
            name: Prozent abbezahlt
            entity: sensor.pv_geldertrag_gesamt
            state: "{{ '%.2f'%(100*(states('sensor.pv_geldertrag_gesamt') | float) / ((states('sensor.pv_geldertrag_gesamt') | float) + (states('sensor.pv_geldbetrag_bis_amortisation') | float))) }} %"
