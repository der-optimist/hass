template: 
  - sensor:
        ##################
        # Solcast sensors
        ##################
      - unique_id: solcast_forecast_average_30min
        name: "Solcast Forecast Average 30 min"
        unit_of_measurement: 'W'
        state: >
          {{ state_attr('sensor.solcast_forecast_rest', 'forecasts')[0].pv_estimate|default('variable is not defined')| round(2) *1000 }}
        ##################
        # Heizung
        ##################
      - name: "Stunden bis Warmwasser heizen"
        unique_id: stunden_bis_warmwasser_heizen
        state: >
          {% set water_temp_heating_will_start = 42 %}
          {% set temp_loss_per_hour = 0.3 %}
          {% set current_temp = states('sensor.water_heater_current_temp') %}
          {% if is_number(current_temp) %}
            {% if (current_temp | float(0)) > 0 %}
              {{ (((current_temp | float(water_temp_heating_will_start)) - water_temp_heating_will_start) / temp_loss_per_hour) | round(0) }}
            {% else %}
              {{ states('sensor.stunden_bis_warmwasser_heizen') }}
            {% endif %}
          {% else %}
            {{ states('sensor.stunden_bis_warmwasser_heizen') }}
          {% endif %}
        unit_of_measurement: 'hours'
      - name: "Solcast Forecast Peak Zeit bis Wasser heizen"
        unique_id: solcast_forecast_peak_time_before_water_heater
        state: >
          {% set ns = namespace (fc_today_max = 0, fc_today_max_time = utcnow().strftime('%Y-%m-%dT%H:%M:%S.%f0Z')) %}
          {% set hours_water_heater = states('sensor.stunden_bis_warmwasser_heizen')|float(100) %}
          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
            {% set diff_seconds = as_timestamp(forecast.period_end) - as_timestamp(utcnow()) %} 
            {% if diff_seconds < (hours_water_heater * 3600) %}
              {% if ns.fc_today_max < forecast.pv_estimate|float(0) %}
                {% set ns.fc_today_max = forecast.pv_estimate|float(0) %}
                {% set ns.fc_today_max_time = forecast.period_end %}
              {%- endif %}
            {%- endif %}
          {%- endfor %}
          {{ ns.fc_today_max_time }}
    binary_sensor:
      - unique_id: water_heater_pv_boost_condition
        state: >
          {% if is_state('timer.minimum_time_water_heater_boost','active') %}
            {{ true }}
          {% else %}
            {% set ts_peak_time = as_timestamp(states('sensor.solcast_forecast_peak_zeit_bis_wasser_heizen')) %}
            {% set ts_now = as_timestamp(now()) %}
            {% set minutes_start_before_peak = 61 %}
            {% if (ts_peak_time - ts_now) < (minutes_start_before_peak * 60) %}
              {% if is_state('binary_sensor.template_water_heater_pv_power_sufficient','on') %}
                {{ true }}
              {% else %}
                {{ false }}
              {% endif %}
            {% else %}
              {{ false }}
            {% endif %}
          {% endif %}
        attributes:
          friendly_name: "Water Heater PV-Boost Bedingungen"
      - unique_id: water_heater_pv_power_sufficient
        state: >
          {% set min_einspeisung_pv = 1200 %}
          {% set netz = states('sensor.el_leistung_netz') | float(0) %}
          {% set heizung = states('sensor.el_leistung_wp_gesamt') | float(0) %}
          {% set netz_ohne_heizung = netz - heizung %}
          {% if netz_ohne_heizung < (-1 * min_einspeisung_pv) %}
            {{ true }}
          {% else %}
            {{ false }}
          {% endif %}
        delay_on:
          minutes: 10
        delay_off:
          minutes: 5
        attributes:
          friendly_name: "Water Heater PV-Power sufficient"

automation:
  - id: 'ab85056e-0160-46c3-9627-043b3a969489'
    alias: Warmwasser PV-Boost
    description: ''
    mode: queued
    trigger:
      - platform: state
        entity_id: binary_sensor.template_water_heater_pv_boost_condition
        to: 'on'
        id: boost_start
      - platform: state
        entity_id: binary_sensor.template_water_heater_pv_boost_condition
        to: 'off'
        id: boost_end
      - platform: state
        entity_id: binary_sensor.template_water_heater_pv_boost_condition
        to: 'unavailable'
        id: unavail
    condition: []
    action:
      - choose:
        - conditions:
          - condition: trigger
            id: boost_start
          sequence:
          - service: notify.telegram_jo
            data:
              message: 'Starte PV-Boost WW'
          - service: water_heater.set_operation_mode
            data:
              operation_mode: 'on'
            target:
              entity_id: water_heater.dhw1
          - service: timer.start
            target:
              entity_id: timer.minimum_time_water_heater_boost
            data:
              duration: '01:00:00'
        - conditions:
          - condition: trigger
            id: boost_end
          sequence:
          - service: notify.telegram_jo
            data:
              message: 'Beende PV-Boost WW'
          - service: water_heater.set_operation_mode
            data:
              operation_mode: 'eco'
            target:
              entity_id: water_heater.dhw1
        - conditions:
          - condition: trigger
            id: unavail
          sequence:
          - service: notify.telegram_jo
            data:
              message: 'PV-Boost Condition unavailable'
        default: []