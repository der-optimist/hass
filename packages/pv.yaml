template: 
  - sensor:
        ##################
        # Solcast sensors
        ##################
      - unique_id: solcast_forecast_average_30min
        name: "Solcast Forecast Average 30 min"
        unit_of_measurement: 'W'
        state: >
          {{ state_attr('sensor.solcast_forecast_rest', 'forecasts')[0].pv_estimate|default('variable is not defined')| round(2) *1000 }}
#      - name: "Solcast Forecast Energy day 0"
#        unique_id: solcast_forecast_energy_day_0
#        unit_of_measurement: "kWh"
#        device_class: energy
#        state: >
#          {% set ns = namespace (fc_today = 0) %}
#          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
#            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
#            {% if daydiff.days == 0 %}
#              {% set ns.fc_today = ns.fc_today + (forecast.pv_estimate/2)|float %}
#            {%- endif %}
#          {%- endfor %}
#          {{ ns.fc_today|round(2) }}
#      - name: "Solcast Forecast Energy day 1"
#        unique_id: solcast_forecast_energy_day_1
#        unit_of_measurement: "kWh"
#        device_class: energy
#        state: >
#          {% set ns = namespace (fc_tommorrow = 0) %}
#          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
#            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
#            {% if daydiff.days == 1 %}
#              {% set ns.fc_tommorrow = ns.fc_tommorrow + (forecast.pv_estimate/2)|float %}
#            {%- endif %}
#          {%- endfor %}
#          {{ ns.fc_tommorrow|round(2) }}
#      - name: "Solcast Forecast Energy day 2"
#        unique_id: solcast_forecast_energy_day_2
#        unit_of_measurement: "kWh"
#        device_class: energy
#        state: >
#          {% set ns = namespace (fc_tommorrow = 0) %}
#          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
#            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
#            {% if daydiff.days == 2 %}
#              {% set ns.fc_tommorrow = ns.fc_tommorrow + (forecast.pv_estimate/2)|float %}
#            {%- endif %}
#          {%- endfor %}
#          {{ ns.fc_tommorrow|round(2) }}
#      - name: "Solcast Forecast Energy day 3"
#        unique_id: solcast_forecast_energy_day_3
#        unit_of_measurement: "kWh"
#        device_class: energy
#        state: >
#          {% set ns = namespace (fc_tommorrow = 0) %}
#          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
#            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
#            {% if daydiff.days == 3 %}
#              {% set ns.fc_tommorrow = ns.fc_tommorrow + (forecast.pv_estimate/2)|float %}
#            {%- endif %}
#          {%- endfor %}
#          {{ ns.fc_tommorrow|round(2) }}
#      - name: "Solcast Forecast Energy day 4"
#        unique_id: solcast_forecast_energy_day_4
#        unit_of_measurement: "kWh"
#        device_class: energy
#        state: >
#          {% set ns = namespace (fc_tommorrow = 0) %}
#          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
#            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
#            {% if daydiff.days == 4 %}
#              {% set ns.fc_tommorrow = ns.fc_tommorrow + (forecast.pv_estimate/2)|float %}
#            {%- endif %}
#          {%- endfor %}
#          {{ ns.fc_tommorrow|round(2) }}
#      - name: "Solcast Forecast Energy day 5"
#        unique_id: solcast_forecast_energy_day_5
#        unit_of_measurement: "kWh"
#        device_class: energy
#        state: >
#          {% set ns = namespace (fc_tommorrow = 0) %}
#          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
#            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
#            {% if daydiff.days == 5 %}
#              {% set ns.fc_tommorrow = ns.fc_tommorrow + (forecast.pv_estimate/2)|float %}
#            {%- endif %}
#          {%- endfor %}
#          {{ ns.fc_tommorrow|round(2) }}
#      - name: "Solcast Forecast Peak Power Today"
#        unique_id: solcast_forecast_peak_power_today
#        unit_of_measurement: "kW"
#        device_class: power
#        state_class: measurement
#        state: >
#          {% set ns = namespace (fc_today_max = 0) %}
#          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
#            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
#            {% if daydiff.days == 0 %}
#              {% if ns.fc_today_max < forecast.pv_estimate|float %}
#                {% set ns.fc_today_max = forecast.pv_estimate|float %}
#              {%- endif %}
#            {%- endif %}
#          {%- endfor %}
#          {{ ns.fc_today_max|round(2) }}
#      - name: "Solcast Forecast Peak Power Tomorrow"
#        unique_id: solcast_forecast_peak_power_tomorrow
#        unit_of_measurement: "kW"
#        device_class: power
#        state_class: measurement
#        state: >
#          {% set ns = namespace (fc_tomorrow_max = 0) %}
#          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
#            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
#            {% if daydiff.days == 1 %}
#              {% if ns.fc_tomorrow_max < forecast.pv_estimate|float %}
#                {% set ns.fc_tomorrow_max = forecast.pv_estimate|float %}
#              {%- endif %}
#            {%- endif %}
#          {%- endfor %}
#          {{ ns.fc_tomorrow_max|round(2) }}
#      - name: "Solcast Forecast Peak Time Today"
#        unique_id: solcast_forecast_peak_time_today
#        state: >
#          {% set ns = namespace (fc_today_max = 0, fc_today_max_time = 0) %}
#          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
#            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
#            {% if daydiff.days == 0 %}
#              {% if ns.fc_today_max < forecast.pv_estimate|float %}
#                {% set ns.fc_today_max = forecast.pv_estimate|float %}
#                {% set ns.fc_today_max_time = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).time() %}
#              {%- endif %}
#            {%- endif %}
#          {%- endfor %}
#          {{ ns.fc_today_max_time }}
#      - name: "Solcast Forecast Peak Time Tomorrow"
#        unique_id: solcast_forecast_peak_time_tomorrow
#        state: >
#          {% set ns = namespace (fc_tomorrow_max = 0, fc_tomorrow_max_time = 0) %}
#          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
#            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
#            {% if daydiff.days == 1 %}
#              {% if ns.fc_tomorrow_max < forecast.pv_estimate|float %}
#                {% set ns.fc_tomorrow_max = forecast.pv_estimate|float %}
#                {% set ns.fc_tomorrow_max_time = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).time() %}
#              {%- endif %}
#            {%- endif %}
#          {%- endfor %}
#          {{ ns.fc_tomorrow_max_time }}
#      - name: "Solcast Forecast Power Next 24 Hours"
#        unique_id: solcast_forecast_power_next_24_hours
#        state: >
#          {% set ns = namespace (fc_next24 = 0) %}
#          {% for i in range(0, 47) %}
#            {% set ns.fc_next24 = ns.fc_next24 + states.sensor.solcast_forecast_rest.attributes['forecasts'][i]['pv_estimate']|float %}
#          {%- endfor %}
#          {{ ns.fc_next24|round(2) }}
#        unit_of_measurement: 'kW'
#        device_class: power
        ##################
        # Heizung
        ##################
      - name: "Stunden bis Warmwasser heizen"
        unique_id: stunden_bis_warmwasser_heizen
        state: >
          {% set water_temp_heating_will_start = 42 %}
          {% set temp_loss_per_hour = 0.3 %}
          {% set current_temp = states('sensor.water_heater_current_temp') %}
          {% if is_number(current_temp) %}
            {% if (current_temp | float(0)) > 0 %}
              {{ (((current_temp | float(water_temp_heating_will_start)) - water_temp_heating_will_start) / temp_loss_per_hour) | round(0) }}
            {% else %}
              {{ states('sensor.stunden_bis_warmwasser_heizen') }}
            {% endif %}
          {% else %}
            {{ states('sensor.stunden_bis_warmwasser_heizen') }}
          {% endif %}
        unit_of_measurement: 'hours'
      - name: "Solcast Forecast Peak Zeit bis Wasser heizen"
        unique_id: solcast_forecast_peak_time_before_water_heater
        state: >
          {% set ns = namespace (fc_today_max = 0, fc_today_max_time = utcnow().strftime('%Y-%m-%dT%H:%M:%S.%f0Z')) %}
          {% set hours_water_heater = states('sensor.stunden_bis_warmwasser_heizen')|float(100) %}
          {% for forecast in state_attr('sensor.solcast_forecast_rest', 'forecasts')|default('variable is not defined') %}
            {% set diff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)) - as_local(utcnow()) %} 
            {% if diff.seconds < (hours_water_heater * 3600) %}
              {% if ns.fc_today_max < forecast.pv_estimate|float(0) %}
                {% set ns.fc_today_max = forecast.pv_estimate|float(0) %}
                {% set ns.fc_today_max_time = forecast.period_end %}
              {%- endif %}
            {%- endif %}
          {%- endfor %}
          {{ ns.fc_today_max_time }}
    binary_sensor:
      - unique_id: water_heater_pv_boost_condition
        state: >
          {% if is_state('timer.minimum_time_water_heater_boost','active') %}
            {{ true }}
          {% else %}
            {% set ts_peak_time = as_timestamp(states('sensor.solcast_forecast_peak_zeit_bis_wasser_heizen')) %}
            {% set ts_now = as_timestamp(now()) %}
            {% set minutes_start_before_peak = 61 %}
            {% set min_einspeisung_pv = 1200 %}
            {% if (ts_peak_time - ts_now) < (minutes_start_before_peak * 60) %}
              {% set netz = states('sensor.el_leistung_netz') | float(0) %}
              {% set heizung = states('sensor.el_leistung_wp_gesamt') | float(0) %}
              {% set netz_ohne_heizung = netz - heizung %}
              {% if netz_ohne_heizung < (-1 * min_einspeisung_pv) %}
                {{ true }}
              {% else %}
                {{ false }}
              {% endif %}
            {% else %}
              {{ false }}
            {% endif %}
          {% endif %}
        delay_on:
          minutes: 10
        delay_off:
          minutes: 10
        attributes:
          friendly_name: "Water Heater PV-Boost Bedingungen"