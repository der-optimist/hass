#
# --------------------------------
# --                            --
# --          Template          --
# --                            --
# --------------------------------
#
  - platform: template
    sensors:
#
#     --------------------------------
#     --          Date              --
#     --------------------------------
#
      date_template:
        friendly_name: 'Datum'
        value_template: '{{ as_timestamp(now()) | timestamp_custom("%d.%m.%Y", True) }}'
#
#     --------------------------------
#     --     Temporäre Dinge        --
#     --------------------------------
#
      helligkeit_wetterstation_ersatz:
        value_template: >-
          {{ (states('sensor.el_leistung_pv_ac') | float(0)) * 5 }}
        friendly_name: 'Helligkeit Wetterstation Ersatz'
        unit_of_measurement: 'lx'
        icon_template: mdi:weather-sunny
#
#     --------------------------------
#     --    Temp. und Luftf.        --
#     --------------------------------
#
      temp_aussen:
        friendly_name: 'Temp. Außen'
        unit_of_measurement: '°C'
        value_template: "{{ states('sensor.temp_wetterstation') }}"
        device_class: temperature
      luftfeuchtigkeit_aussen:
        friendly_name: 'Luftfeuchtigkeit Außen'
        unit_of_measurement: '%'
        value_template: "{{ states('sensor.humidity_outside_internet') }}"
        device_class: humidity
      luftfeuchtigkeit_kuche_aqara:
        friendly_name: 'Luftfeuchtigkeit Küche'
        unit_of_measurement: '%'
        value_template: "{{ (states('sensor.0x00158d00033ddc57_humidity') | float(0)) | round }}"
        device_class: humidity
      temp_kuche_aqara:
        friendly_name: 'Temp. Küche Aqara'
        unit_of_measurement: '°C'
        value_template: "{{ (states('sensor.0x00158d00033ddc57_temperature') | float(0)) | round(1) }}"
        device_class: temperature
      luftdruck_kuche_aqara:
        friendly_name: 'Luftdruck Küche Aqara'
        unit_of_measurement: 'hPa'
        value_template: "{{ (states('sensor.0x00158d00033ddc57_pressure') | float(0)) | round }}"
        device_class: pressure
      luftfeuchtigkeit_waschkuche:
        friendly_name: 'Luftfeuchtigkeit Waschküche'
        unit_of_measurement: '%'
        value_template: "{{ states('sensor.luftfeuchtigkeit_relativ_esp_wemos_d1_5_sht31') }}"
        device_class: humidity
      temp_waschkuche:
        friendly_name: 'Temp. Waschküche'
        unit_of_measurement: '°C'
        value_template: "{{ states('sensor.temp_esp_wemos_d1_5_sht31') }}"
        device_class: temperature
      luftfeuchtigkeit_werkelraum:
        friendly_name: 'Luftfeuchtigkeit Werkelraum'
        unit_of_measurement: '%'
        value_template: "{{ states('sensor.luftfeuchtigkeit_relativ_esp_wemos_d1_6_sht31') }}"
        device_class: humidity
      temp_werkelraum:
        friendly_name: 'Temp. Werkelraum'
        unit_of_measurement: '°C'
        value_template: "{{ states('sensor.temp_esp_wemos_d1_6_sht31') }}"
        device_class: temperature
      luftfeuchtigkeit_partyraum:
        friendly_name: 'Luftfeuchtigkeit Partyraum'
        unit_of_measurement: '%'
        value_template: "{{ states('sensor.luftfeuchtigkeit_relativ_esp_wemos_d1_11_sht31') }}"
        device_class: humidity
      temp_partyraum:
        friendly_name: 'Temp. Partyraum'
        unit_of_measurement: '°C'
        value_template: "{{ states('sensor.temp_esp_wemos_d1_11_sht31') }}"
        device_class: temperature
      luftfeuchtigkeit_vorratsraum:
        friendly_name: 'Luftfeuchtigkeit Speis'
        unit_of_measurement: '%'
        value_template: "{{ (states('sensor.luftfeuchtigkeit_relativ_esp_wemos_d1_9_bme280') | float(3) -3) | round(1) }}"
        device_class: humidity
      temp_vorratsraum:
        friendly_name: 'Temp. Speis'
        unit_of_measurement: '°C'
        value_template: "{{ states('sensor.temp_esp_wemos_d1_9_bme280') }}"
        device_class: temperature
      temp_outside_internet:
        friendly_name: "Temperatur außen Internet"
        value_template: "{{ state_attr('weather.lieblingshaus', 'temperature') }}"
        unit_of_measurement: '°C'
        device_class: temperature
      humidity_outside_internet:
        friendly_name: "Luftfeuchtigkeit außen Internet"
        value_template: "{{ state_attr('weather.lieblingshaus', 'humidity') }}"
        unit_of_measurement: '%'
        device_class: humidity
#
#
#     --------------------------------
#     --     Stromverbrauch         --
#     --------------------------------
#
      stromzaehler_netzbezug:
        value_template: "{{ '%.1f'%(states('sensor.stromzahler_positive_active_energy_in_tariff_t1') | float(0) /1000) | float(0) }}"
        friendly_name: 'Stromzähler Netzbezug'
        unit_of_measurement: 'kWh'
        icon_template: mdi:counter
      stromzaehler_netzeinspeisung:
        value_template: "{{ '%.1f'%(states('sensor.stromzahler_negative_active_energy_in_tariff_t1') | float(0) /1000) | float(0) }}"
        friendly_name: 'Stromzähler Netzeinspeisung'
        unit_of_measurement: 'kWh'
        icon_template: mdi:counter
      stromkosten_netzbezug:
        value_template: "{{ '%.2f'%((states('sensor.stromzaehler_netzbezug') | float(0) ) * (states('input_number.strompreis') | float(0))) }}"
        friendly_name: 'Stromkosten Netzbezug'
        unit_of_measurement: '€'
        icon_template: mdi:currency-eur
#
#     --------------------------------
#     --        Ertrag PV           --
#     --------------------------------
#
      pv_geldertrag_durch_einspeisung_gesamt:
        value_template: "{{ '%.2f'%((states('sensor.stromzaehler_netzeinspeisung') | float(0) ) * (states('input_number.pv_einspeiseverguetung') | float(0))) }}"
        friendly_name: 'PV Ertrag Einspeisung'
        unit_of_measurement: '€'
        icon_template: mdi:currency-eur
      euro_pro_stunde_eigenverbrauch:
        value_template: "{{ (states('sensor.el_leistung_eigenverbrauch') | float(0) * states('input_number.strompreis') | float(0)) / 1000 }}"
        friendly_name: 'Euro pro Stunde - Eigenverbrauch'
        unit_of_measurement: '€/h'
      pv_geldertrag_durch_eigenverbrauch_gesamt:
        value_template: "{{ '%.2f'%(((states('sensor.stromzaehler_pv_ac_gesamt') | float(0) ) - (states('sensor.stromzaehler_netzeinspeisung') | float(0) ))* (states('input_number.strompreis') | float(0))) }}"
        friendly_name: 'PV Ertrag Eigenverbrauch'
        unit_of_measurement: '€'
        icon_template: mdi:currency-eur
      pv_geldertrag_gesamt:
        value_template: "{{ '%.2f'%((states('sensor.pv_geldertrag_durch_einspeisung_gesamt') | float(0) ) + (states('sensor.pv_geldertrag_durch_eigenverbrauch_gesamt') | float(0))) }}"
        friendly_name: 'PV Ertrag gesamt'
        unit_of_measurement: '€'
        icon_template: mdi:currency-eur
      pv_geldbetrag_bis_amortisation:
        value_template: "{{ '%.2f'%(13724.42 - (states('sensor.pv_geldertrag_gesamt') | float(13724.42))) }}"
        friendly_name: 'PV verbleibend bis Amortisation'
        unit_of_measurement: '€'
        icon_template: mdi:currency-eur
# 
#     --------------------------------
#     --   Elektrische Leistung     --
#     --------------------------------
#
#       --------------------------------
#       --       Netz und PV          --
#       --------------------------------
#
      el_leistung_stromzaehler_netzbezug:
        value_template: "{{ states('sensor.stromzahler_sum_active_instantaneous_power') }}"
        friendly_name: 'El. Leistung Stromzähler Netzbezug'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_netz:
        value_template: >-
          {% if is_state('binary_sensor.ping_wechselrichter_pv','on') %}
            {{ states('sensor.power_grid_fronius_power_flow_0_192_168_178_28') | float(0) }}
          {% else %}
            {{ states('sensor.el_leistung_stromzaehler_netzbezug') | float(0) }}
          {% endif %}
        friendly_name: 'El. Leistung Netz (positiv gleich Bezug)'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_einspeisung:
        value_template: >-
          {% if (states('sensor.el_leistung_netz') | float(0)) < 0 %}
            {{ -1*(states('sensor.el_leistung_netz') | float(0)) }}
          {% else %}
            0.0
          {% endif %}
        friendly_name: 'El. Leistung Einspeisung'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_pv_ac:
        value_template: >-
          {% if is_state('binary_sensor.ping_wechselrichter_pv','on') %}
            {{ states('sensor.power_photovoltaics_fronius_power_flow_0_192_168_178_28') | float(0) }}
          {% else %}
            0.0
          {% endif %}
        friendly_name: 'El. Leistung PV AC'
        unit_of_measurement: 'W'
        entity_picture_template: '/local/icons/power/solar_panel.svg'
      el_leistung_pv_dc:
        value_template: >-
          {% if is_state('binary_sensor.ping_wechselrichter_pv','on') %}
            {{ ((states('sensor.voltage_dc_fronius_inverter_1_192_168_178_28') | float(0)) * (states('sensor.current_dc_fronius_inverter_1_192_168_178_28') | float(0))) + ((states('sensor.voltage_dc_2_fronius_inverter_1_192_168_178_28') | float(0)) * (states('sensor.current_dc_2_fronius_inverter_1_192_168_178_28') | float(0))) }}
          {% else %}
            0.0
          {% endif %}
        friendly_name: 'El. Leistung PV DC'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      wirkungsgrad_wechselrichter:
        value_template: >-
          {% set dc = ((states('sensor.voltage_dc_fronius_inverter_1_192_168_178_28') | float(1)) * (states('sensor.current_dc_fronius_inverter_1_192_168_178_28') | float(1))) + ((states('sensor.voltage_dc_2_fronius_inverter_1_192_168_178_28') | float(0)) * (states('sensor.current_dc_2_fronius_inverter_1_192_168_178_28') | float(0))) %}
          {% set ac = states('sensor.power_ac_fronius_inverter_1_192_168_178_28') | float(0) %}
          {% set eta = (ac / dc) * 100 %}
          {% if eta > 100 %}
            100.0
          {% elif eta < 0 %}
            0.0
          {% else %}
            {{ eta | round(1) }}
          {% endif %}
        friendly_name: 'Wirkungsgrad Wechselrichter'
        unit_of_measurement: '%'
        icon_template: mdi:chart-bell-curve-cumulative
      el_leistung_pv_dc_string1:
        value_template: "{{ ((states('sensor.voltage_dc_fronius_inverter_1_192_168_178_28') | float(0)) * (states('sensor.current_dc_fronius_inverter_1_192_168_178_28') | float(0))) |round(0) }}"
        friendly_name: 'El. Leistung PV DC String 1'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_pv_dc_string2:
        value_template: "{{ ((states('sensor.voltage_dc_2_fronius_inverter_1_192_168_178_28') | float(0)) * (states('sensor.current_dc_2_fronius_inverter_1_192_168_178_28') | float(0))) |round(0) }}"
        friendly_name: 'El. Leistung PV DC String 2'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      unterschied_pv_string1_string2:
        value_template: >-
          {% set dc1 = (states('sensor.el_leistung_pv_dc_string1') | float(0)) %}
          {% set dc2 = (states('sensor.el_leistung_pv_dc_string2') | float(0)) %}
          {% if dc1 > 500 and dc2 > 500 %}
            {{ (((dc1 - dc2) / (0.5*(dc1 + dc2))) * 100) | round(1) }}
          {% else %}
            {{ 0.0 }}
          {% endif %}
        friendly_name: 'Unterschied PV String 1 zu String 2'
        unit_of_measurement: '%'
        icon_template: mdi:percent-outline
      stromzaehler_pv_ac_gesamt:
        #value_template: "{{ (states('sensor.pv_ac_energy_riemann') | float(0) + 3740.43) | round(1) }}"
        value_template: "{{ ((states('sensor.energy_total_fronius_inverter_1_192_168_178_28') | float(0) / 1000) + 3740.43) | round(1) }}"
        # 3740.43 was total production of first inverter that had a defect
        friendly_name: 'Gesamtproduktion PV'
        unit_of_measurement: 'kWh'
        icon_template: mdi:counter
      el_leistung_verbrauch_gesamt:
        value_template: >-
          {% if is_state('binary_sensor.ping_wechselrichter_pv','on') %}
            {{ -1*states('sensor.power_load_fronius_power_flow_0_192_168_178_28') | float(0) }}
          {% else %}
            {{ -1*states('sensor.el_leistung_stromzaehler_netzbezug') | float(0) }}
          {% endif %}
        friendly_name: 'El. Leistung Verbrauch gesamt'
        unit_of_measurement: 'W'
        entity_picture_template: '/local/icons/power/power_usage.svg'
      el_leistung_eigenverbrauch:
        value_template: >-
          {% if (states('sensor.el_leistung_pv_ac') | float(0)) > (states('sensor.el_leistung_verbrauch_gesamt') | float(0)) %}
            {{ states('sensor.el_leistung_verbrauch_gesamt') | float(0) }}
          {% else %}
            {{ states('sensor.el_leistung_pv_ac') | float(0) }}
          {% endif %}
        friendly_name: 'El. Leistung Eigenverbrauch'
        unit_of_measurement: 'W'
        entity_picture_template: '/local/icons/power/power_usage.svg'
      pv_einspeisung_letzte_3_min_durchschnitt_anzeige:
        value_template: >-
          {% if states('sensor.pv_einspeisung_letzte_3_min_durchschnitt') in ['unavailable', 'unknown', 'none'] %}
            {{ 0 }}
          {% else %}
            {{ states('sensor.pv_einspeisung_letzte_3_min_durchschnitt') }}
          {% endif %}
        friendly_name: 'PV Einspeisung - Anzeige'
        unit_of_measurement: 'W'
        entity_picture_template: >
          {% if states('sensor.pv_einspeisung_letzte_3_min_durchschnitt') in ['unavailable', 'unknown', 'none'] %}
            {{ '/local/icons/power/solar_power_gray.svg' }}
          {% else %}
            {% if (states('sensor.pv_einspeisung_letzte_3_min_durchschnitt') | float(0)) > 6000 %}
              {{ '/local/icons/power/solar_power_green.svg' }}
            {% elif (states('sensor.pv_einspeisung_letzte_3_min_durchschnitt') | float(0)) > 1500 %}
              {{ '/local/icons/power/solar_power_orange.svg' }}
            {% else %}
              {{ '/local/icons/power/solar_power_gray.svg' }}
            {% endif %}
          {% endif %}
#
#
#       --------------------------------
#       --   effektiver Strompreis    --
#       --------------------------------
#
      einspeiselimit_watt:
        value_template: "{{ (states('input_number.pv_einspeisebegrenzung_prozent') | float(0) ) * (states('input_number.pv_installierte_peakleistung') | float(0) ) * 0.01 }}"
#        value_template: "{{ 30 }}"
        friendly_name: 'El. Leistung Einspeiselimit'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      anteil_el_leistung_netzbezug:
        value_template: >-
          {% if (states('sensor.el_leistung_netz') | float(0)) > 0 %}
            {{ (states('sensor.el_leistung_netz') | float(0)) / (states('sensor.el_leistung_verbrauch_gesamt') | float(1)) }}
          {% else %}
            0.0
          {% endif %}
        friendly_name: 'El. Leistung Anteil Netzbezug'
        unit_of_measurement: 'Anteil'
        icon_template: mdi:chart-donut
      anteil_el_leistung_pv_nicht_einspeisbar:
        value_template: >-
          {% if (states('sensor.el_leistung_pv_ac') | float(0)) > ((states('sensor.einspeiselimit_watt') | float(0)) + (states('sensor.el_leistung_verbrauch_gesamt') | float(0))) %}
            1.0
          {% elif (states('sensor.el_leistung_pv_ac') | float(0)) > (states('sensor.einspeiselimit_watt') | float(0)) %}
            {{ ((states('sensor.el_leistung_pv_ac') | float(0)) - (states('sensor.einspeiselimit_watt') | float(0))) / (states('sensor.el_leistung_verbrauch_gesamt') | float(1)) }}
          {% else %}
            0.0
          {% endif %}
        friendly_name: 'El. Leistung Anteil PV nicht einspeisbar'
        unit_of_measurement: 'Anteil'
        icon_template: mdi:chart-donut
      anteil_el_leistung_pv_einspeisbar:
        value_template: "{{ 1 - (states('sensor.anteil_el_leistung_netzbezug') | float(0) ) - (states('sensor.anteil_el_leistung_pv_nicht_einspeisbar') | float(0) ) }}"
        friendly_name: 'El. Leistung Anteil PV einspeisbar'
        unit_of_measurement: 'Anteil'
        icon_template: mdi:chart-donut
      strompreis_aktuell_effektiv_euro:
        value_template: "{{ (states('input_number.strompreis') | float(0) ) * (states('sensor.anteil_el_leistung_netzbezug') | float(0) ) + (states('input_number.pv_einspeiseverguetung') | float(0) ) * (states('sensor.anteil_el_leistung_pv_einspeisbar') | float(0) ) }}"
        friendly_name: 'Strompreis aktuell effektiv Euro'
        unit_of_measurement: '€'
        icon_template: mdi:currency-eur
      strompreis_aktuell_abrechnung_euro:
        value_template: "{{ (states('input_number.strompreis') | float(0) ) * (states('sensor.anteil_el_leistung_netzbezug') | float(0) ) }}"
        friendly_name: 'Strompreis aktuell Abrechnung Euro'
        unit_of_measurement: '€'
        icon_template: mdi:currency-eur
      strompreis_aktuell_effektiv_cent:
        value_template: "{{ ((states('sensor.strompreis_aktuell_effektiv_euro') | float(0)) * 100) | round(0) }}"
        friendly_name: 'Strompreis aktuell effektiv Cent'
        unit_of_measurement: 'ct'
        icon_template: mdi:currency-eur
#
#       --------------------------------
#       --          Geräte            --
#       --------------------------------
#
      el_leistung_kochfeld:
        friendly_name: 'El. Leistung Kochfeld'
        value_template: "{{ states('sensor.el_leistung_kochfeld_esp_2') }}"
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_luftentf_vorratsraum:
        value_template: >-
          {% if states('sensor.el_leistung_kuhlschrank_keller') | float(0) < 1 %}
            0.0
          {% elif states('sensor.el_leistung_kuhlschrank_keller') | float(0) < 100 %}
            {{ '%.1f'%(states('sensor.el_leistung_kuhlschrank_keller') | float(0) * 0.53) }}
          {% else %}
            {{ '%.1f'%(states('sensor.el_leistung_kuhlschrank_keller') | float(0) * 0.656) }}
          {% endif %}
        friendly_name: 'El. Leistung Luftentf. Vorratsraum'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_waschmaschine:
        value_template: >-
          {% if states('sensor.el_leistung_waschmaschine_scheinleistung') | float(0) < 15 %}
            0.4
          {% elif states('sensor.el_leistung_waschmaschine_scheinleistung') | float(0) < 360 %}
            {{ '%.1f'%(states('sensor.el_leistung_waschmaschine_scheinleistung') | float(0) * (states('sensor.el_leistung_waschmaschine_scheinleistung') | float(0) * 0.000688 + 0.561576)) }}
          {% elif states('sensor.el_leistung_waschmaschine_scheinleistung') | float(0) < 1000 %}
            {{ '%.1f'%(states('sensor.el_leistung_waschmaschine_scheinleistung') | float(0) * 0.81) }}
          {% else %}
            {{ '%.1f'%(states('sensor.el_leistung_waschmaschine_scheinleistung') | float(0) * 1) }}
          {% endif %}
        friendly_name: 'El. Leistung Waschmaschine'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_trockner:
        value_template: >-
          {% if states('sensor.el_leistung_trockner_scheinleistung') | float(0) < 6 %}
            0.0
          {% elif states('sensor.el_leistung_trockner_scheinleistung') | float(0) < 9 %}
            {{ '%.1f'%(states('sensor.el_leistung_trockner_scheinleistung') | float(0) * (states('sensor.el_leistung_trockner_scheinleistung') | float(0) * (-0.008991) + 0.072442)) }}
          {% elif states('sensor.el_leistung_trockner_scheinleistung') | float(0) < 10 %}
            {{ '%.1f'%(states('sensor.el_leistung_trockner_scheinleistung') | float(0) * 0.15) }}
          {% else %}
            {{ '%.1f'%(states('sensor.el_leistung_trockner_scheinleistung') | float(0) * 1) }}
          {% endif %}
        friendly_name: 'El. Leistung Trockner'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_gefrierschrank:
        value_template: >-
          {% if states('sensor.el_leistung_gefrierschrank_scheinleistung') | float(0) < 22 %}
            {{ '%.1f'%(states('sensor.el_leistung_gefrierschrank_scheinleistung') | float(0) * 0.064) }}
          {% elif states('sensor.el_leistung_gefrierschrank_scheinleistung') | float(0) < 80 %}
            {{ '%.1f'%(states('sensor.el_leistung_gefrierschrank_scheinleistung') | float(0) * 0.73) }}
          {% else %}
            {{ '%.1f'%(states('sensor.el_leistung_gefrierschrank_scheinleistung') | float(0) * 0.82) }}
          {% endif %}
        friendly_name: 'El. Leistung Gefrierschrank'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_kuhlschrank_kuche:
        value_template: >-
          {% if states('sensor.el_leistung_kuhlschrank_kuche_scheinleistung') | float(0) < 10 %}
            0.0
          {% elif states('sensor.el_leistung_kuhlschrank_kuche_scheinleistung') | float(0) < 20 %}
            {{ '%.1f'%(states('sensor.el_leistung_kuhlschrank_kuche_scheinleistung') | float(0) * 0.95) }}
          {% else %}
            {{ '%.1f'%(states('sensor.el_leistung_kuhlschrank_kuche_scheinleistung') | float(0) * 0.75) }}
          {% endif %}
        friendly_name: 'El. Leistung Kühlschrank Küche'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_spulmaschine:
        value_template: >-
          {% if states('sensor.el_leistung_spulmaschine_scheinleistung') | float(0) < 6 %}
            0.0
          {% elif states('sensor.el_leistung_spulmaschine_scheinleistung') | float(0) < 8 %}
            {{ '%.1f'%(states('sensor.el_leistung_spulmaschine_scheinleistung') | float(0) * 0.2) }}
          {% elif states('sensor.el_leistung_spulmaschine_scheinleistung') | float(0) < 20 %}
            {{ '%.1f'%(states('sensor.el_leistung_spulmaschine_scheinleistung') | float(0) * 1.0) }}
          {% elif states('sensor.el_leistung_spulmaschine_scheinleistung') | float(0) < 60 %}
            {{ '%.1f'%(states('sensor.el_leistung_spulmaschine_scheinleistung') | float(0) * 0.55) }}
          {% elif states('sensor.el_leistung_spulmaschine_scheinleistung') | float(0) < 200 %}
            {{ '%.1f'%(states('sensor.el_leistung_spulmaschine_scheinleistung') | float(0) * 0.81) }}
          {% else %}
            {{ '%.1f'%(states('sensor.el_leistung_spulmaschine_scheinleistung') | float(0) * 1.0) }}
          {% endif %}
        friendly_name: 'El. Leistung Spülmaschine'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_tv:
        value_template: >-
          {% if states('sensor.el_leistung_tv_scheinleistung') | float(0) == 0 %}
            0.0
          {% elif states('sensor.el_leistung_tv_scheinleistung') | float(0) < 15 %}
            0.3
          {% elif states('sensor.el_leistung_tv_scheinleistung') | float(0) < 30 %}
            {{ '%.1f'%(states('sensor.el_leistung_tv_scheinleistung') | float(0) * 0.5) }}
          {% elif states('sensor.el_leistung_tv_scheinleistung') | float(0) < 70 %}
            {{ '%.1f'%(states('sensor.el_leistung_tv_scheinleistung') | float(0) * 0.815) }}
          {% else %}
            {{ '%.1f'%(states('sensor.el_leistung_tv_scheinleistung') | float(0) * 0.855) }}
          {% endif %}
        friendly_name: 'El. Leistung TV'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_bildschirm_theke:
        friendly_name: "El. Leistung Bildschirm Theke"
        value_template: >-
          {{ states("sensor.el_leistung_esp_sd_3_2") }}
#
#       --------------------------------
#       --         Heizung            --
#       --------------------------------
#
      el_leistung_wp_aussenteil:
        friendly_name: 'El. Leistung WP Aussenteil'
        value_template: "{{ states('sensor.el_leistung_wp_aussenteil_esp') }}"
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_wp_innenteil:
        friendly_name: 'El. Leistung WP Innenteil'
        value_template: "{{ states('sensor.el_leistung_wp_innenteil_esp') }}"
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_wp_heizstab:
        friendly_name: 'El. Leistung WP Heizstab'
        value_template: "{{ states('sensor.el_leistung_wp_heizstab_esp') }}"
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      el_leistung_wp_gesamt:
        value_template: >-
          {{ states('sensor.el_leistung_wp_aussenteil_esp') | float(0) 
           + states('sensor.el_leistung_wp_heizstab_esp') | float(0)
           + states('sensor.el_leistung_wp_innenteil_esp') | float(0) }}
        friendly_name: 'El. Leistung WP gesamt'
        unit_of_measurement: 'W'
        icon_template: mdi:speedometer
      # max Stellwert Heizkreise Zeitverlauf
      stellwert_heizung_zeitverlauf_max:
        friendly_name: "Stellwert Heizung Zeitverlauf Max"
        value_template: "{{ state_attr('sensor.stellwert_heizung_zeitverlauf_mean', 'max_value') }}"
        unit_of_measurement: '%'
      # Heizung
      heating_room_target_temp:
        friendly_name: "Heizung Zieltemperatur Raum"
        value_template: "{{ state_attr('climate.hc1_2', 'temperature') }}"
        unit_of_measurement: '°C'
        device_class: temperature
      # Warmwasser
      water_heater_target_temp:
        friendly_name: "Warmwasser Zieltemperatur"
        value_template: "{{ state_attr('water_heater.dhw1_2', 'temperature') }}"
        unit_of_measurement: '°C'
        device_class: temperature
      water_heater_current_temp:
        friendly_name: "Warmwasser aktuelle Temperatur"
        value_template: "{{ state_attr('water_heater.dhw1_2', 'current_temperature') }}"
        unit_of_measurement: '°C'
        device_class: temperature
#
#   --------------------------------
#   --         Sonstiges          --
#   --------------------------------
#
      target_temp_kuehlbox:
        friendly_name: 'Zieltemperatur Kühlbox'
        unit_of_measurement: '°C'
        value_template: "{{ states('input_number.target_temp_kuehlbox') | float(0) }}"
#
#
# --------------------------------
# --                            --
# --        Integration         --
# --                            --
# --------------------------------
#
  - platform: integration
    source: sensor.euro_pro_stunde_eigenverbrauch
    name: ertragszaehler_eigenverbrauch_pv
    round: 2
    unit_time: h
    method: left
#
# --------------------------------
# --                            --
# --           History          --
# --                            --
# --------------------------------
#
  - platform: history_stats
    name: Jo at work
    entity_id: binary_sensor.jo_at_work
    state: "on"
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'
  - platform: history_stats
    name: Anteil La wach letzte Stunde
    entity_id: switch.la_schlaft
    state: 'off'
    type: ratio
    end: '{{ now() }}'
    duration:
      hours: 1
  - platform: history_stats
    name: Anteil Le wach letzte Stunde
    entity_id: switch.le_schlaft
    state: 'off'
    type: ratio
    end: '{{ now() }}'
    duration:
      hours: 1
  - platform: history_stats
    name: Anteil MaJo wach letzte Stunde
    entity_id: switch.majo_schlafen
    state: 'off'
    type: ratio
    end: '{{ now() }}'
    duration:
      hours: 1
  - platform: history_stats
    name: Anteil Präsenz Bad EG letzte Stunde
    entity_id: binary_sensor.pm_e_ba
    state: 'on'
    type: ratio
    end: '{{ now() }}'
    duration:
      hours: 1
  - platform: history_stats
    name: Anteil Kinder wach letzte Stunde
    entity_id: binary_sensor.la_oder_le_schlafen
    state: 'off'
    type: ratio
    end: '{{ now() }}'
    duration:
      hours: 1
#
# --------------------------------
# --                            --
# --  Statistics  and filter    --
# --                            --
# --------------------------------
#
  - platform: statistics
    name: PV Einspeisung letzte 3 Min Durchschnitt
    entity_id: sensor.el_leistung_einspeisung
    sampling_size: 40
    state_characteristic: average_step
    max_age:
      minutes: 3
  - platform: statistics
    name: Leistung Netz letzte 3 Min Durchschnitt
    entity_id: sensor.el_leistung_netz
    sampling_size: 40
    state_characteristic: average_step
    max_age:
      minutes: 3
  - platform: statistics
    name: Windgeschwindigkeit Wetterstation max
    entity_id: sensor.windgeschwindigkeit_wetterstation
    sampling_size: 60
    state_characteristic: value_max
    max_age:
      minutes: 2
  - platform: statistics
    name: Windgeschwindigkeit Wetterstation mittel
    entity_id: sensor.windgeschwindigkeit_wetterstation
    sampling_size: 100
    state_characteristic: average_step
    max_age:
      minutes: 15
  - platform: statistics
    name: Blitzentfernung letze 5 Minuten
    entity_id: sensor.blitzortung_lightning_distance
    sampling_size: 10000
    state_characteristic: value_min
    max_age:
      minutes: 5
#
# --------------------------------
# --                            --
# --       Time / Date          --
# --                            --
# --------------------------------
#
  - platform: time_date
    display_options:
      - 'time'
      - 'date'

#
# --------------------------------
# --                            --
# --        Stromzähler         --
# --                            --
# --------------------------------
# nicht mehr YAML, wurde in GUI importiert
#  - platform: edl21
#    name: Stromzähler
#    serial_port: /dev/serial/by-id/usb-FTDI_FT232R_USB_UART_AR0JH225-if00-port0
#
# --------------------------------
# --                            --
# --          solcast           --
# --                            --
# --------------------------------
#
  - platform: rest
    resource: !secret solcast_url
    value_template: '{{ value_json.forecasts.0.pv_estimate }}'
    json_attributes:
      - "forecasts"
    name: 'solcast forecast REST'
    unit_of_measurement: "kW"
    scan_interval: 3600
#
# --------------------------------
# --                            --
# --    Fully Kiosk Browser     --
# --                            --
# --------------------------------
#
  - platform: rest
    name: Kiosk Browser Bildschirm Theke
    resource: 'http://192.168.178.79:2323/?cmd=deviceInfo&type=json&password=nopw'
    json_attributes:
    - screenBrightness
    - screenOn
    - ip4
    - ip6
    - deviceId
    value_template: 'OK'